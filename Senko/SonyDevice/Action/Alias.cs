namespace Senko
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text.RegularExpressions;
    using Newtonsoft.Json;
    using Generic;

    public partial class SonyDevice
    {
        public Action.Alias Alias { get; private set; }

        public partial class Action
        {
            public class Alias
            {
                SonyDevice Parent { get; set; }

                public bool AutoLoad { get; set; } = true;

                public bool SaveToJsonFile { get; set; } = true;

                Dictionary<string, string> _alias { get; set; } = new Dictionary<string, string>();

                public int Count { get { return _alias.Count; } }

                public Alias(SonyDevice parent, bool autoLoad = true)
                {
                    Parent = parent;

                    AutoLoad = autoLoad;

                    if (AutoLoad)
                    {
                        AutoLoadFile();
                    }
                }

                void AutoLoadFile()
                {
                    string defaultFile = Parent.DefaultFilePath + Parent.ID + ".alias";
                    string defaultJsonFile = defaultFile + ".json";

                    if (File.Exists(defaultJsonFile))
                    {
                        Parse(defaultJsonFile);
                    }
                    else if (File.Exists(defaultFile))
                    {
                        //SaveToJsonFile = true;
                        Parse(defaultFile);
                    }
                }

                public bool Parse(string file)
                {
                    Dictionary<string, string> Parsed = new Dictionary<string, string>();

                    if (File.Exists(file))
                    {
                        string text = File.ReadAllText(file).Trim();

                        if (Regex.IsMatch(text, @"^({)(\s*""\w+"":\s*""\w+"",*\s*)+(})$")) // Match to JSON generated by this class
                        {
                            try
                            {
                                JsonConvert.DeserializeObject<Dictionary<string, string>>(File.ReadAllText(file)).ToList().ForEach(x => Add(x.Key, x.Value, false));

                                return true;
                            }
                            catch
                            {
                                return false;
                            }
                        }
                        else if (Regex.IsMatch(text, @"^((\w+)=(([\w, ])+)[\r\n]*)+$")) // Match to .ALIAS
                        {
                            int duplicates = 0;

                            foreach (string line in text.Split(Environment.NewLine))
                            {
                                string[] set = line.Split('=');
                                string action = set[0].Trim();

                                foreach (string alias in set[1].Split(','))
                                {
                                    if (!Parsed.ContainsKey(alias.Trim().Standardize()))
                                    {
                                        Parsed.Add(alias.Standardize(), action);
                                    }
                                    else
                                    {
                                        duplicates++;
                                    }
                                }
                            }

                            if (duplicates == 0)
                            {
                                Parsed.ToList().ForEach(x => Add(x.Key, x.Value, false));

                                WriteJsonFile(_alias);

                                return true;
                            }
                        }
                    }

                    return false;
                }

                public bool Add(string alias, string action, bool writeFile = true)
                {
                    if (!_alias.ContainsKey(alias.Standardize()))
                    {
                        _alias.Add(alias.Standardize(), action.Standardize());

                        if (writeFile)
                        {
                            WriteJsonFile(_alias);
                        }

                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }

                void WriteJsonFile(Dictionary<string, string> aliasList)
                {
                    if (SaveToJsonFile)
                    {
                        string json = JsonConvert.SerializeObject(_alias, Formatting.Indented);

                        try
                        {
                            File.WriteAllText(Parent.DefaultFilePath + Parent.ID + ".alias.json", json);
                        }
                        catch
                        {
                            // Do something...
                        }
                    }
                }

                public bool ContainsAlias(string alias)
                {
                    return _alias.ContainsKey(alias.Standardize());
                }

                public bool ContainsAction(string action)
                {
                    return _alias.ContainsValue(action);
                }

                /// <summary>
                /// Get the action associated with a specific alias
                /// </summary>
                /// <param name="alias"></param>
                /// <returns></returns>
                public string GetAction(string alias)
                {
                    if (_alias.ContainsKey(alias.Standardize()))
                    {
                        return _alias[alias.Standardize()];
                    }
                    else
                    {
                        return null;
                    }
                }

                /// <summary>
                /// Get all stored aliases
                /// </summary>
                /// <returns>A list of aliases</returns>
                public List<string> GetAlias()
                {
                    return _alias.Keys.ToList();
                }

                /// <summary>
                /// Gets a list of stored aliases with a specific action
                /// </summary>
                /// <param name="action">The action to search for</param>
                /// <returns>A list of aliases</returns>
                public List<string> GetAlias(string action)
                {
                    List<string> aliases = new List<string>();

                    foreach (KeyValuePair<string, string> pair in _alias)
                    {
                        if (pair.Value == action)
                        {
                            aliases.Add(pair.Key);
                        }
                    }

                    return aliases;
                }

                /// <summary>
                /// Clear the _alias dictionary and parse a file to add new data
                /// </summary>
                /// <param name="file">The JSON or .alias file to parse</param>
                public void Flush(string file)
                {
                    Clear();

                    Parse(file);
                }

                /// <summary>
                /// Clear the _alias dictionary
                /// </summary>
                public void Clear()
                {
                    _alias.Clear();
                }
            }
        }
    }
}
